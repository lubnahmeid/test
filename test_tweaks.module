<?php

/**
 * @file
 * Contains test_tweaks.module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_views_pre_build().
 *
 * This hook is invoked before the query for the view is built, allowing for
 * dynamic modifications to the viewâ€™s parameters and configuration.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view being built, containing data such as the view ID, display ID,
 *   and any arguments or filters applied.
 */
function test_tweaks_views_pre_build(ViewExecutable $view) {
  // Check if the current view is 'solr_search' and the display is 'block_document_term_listing'.
  if ($view->id() == 'solr_search' && $view->current_display == 'block_document_term_listing') {

    // Get the taxonomy term ID from the URL's route parameters.
    // This allows us to identify which taxonomy term the user is currently viewing.
    $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');

    // Retrieve the taxonomy term storage service to manage taxonomy terms.
    $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');

    // Load all child terms for the current taxonomy term identified by $tid.
    // This will return an array of child term entities.
    $children = array_keys($term_storage->loadChildren($tid));

    // Check if any child terms exist for the current taxonomy term.
    if (!empty($children)) {
      // If child terms are found, append their IDs and the current term ID to the view's arguments.
      // We join the child term IDs with '+' to be used as contextual filters in the query.
      $view->args[] = implode("+", $children) . "+" . $tid;
    } else {
      // If no child terms are found, append only the current term ID to the view's arguments.
      // This means the view will filter results based solely on the current term.
      $view->args[] = $tid;
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * This hook is triggered before an entity is saved. It modifies the entity
 * based on its bundle type: 'document', 'video', or 'classification_record'.
 *
 * @param EntityInterface $entity
 *   The entity being saved.
 */
function test_tweaks_entity_presave(EntityInterface $entity) {
  // Determine the bundle type of the entity.
  switch ($entity->bundle()) {
    // Handle cases for 'document' and 'video' bundles.
    case 'document':
    case 'video':
      if ($entity->getEntityTypeId() == 'node') {
        // Retrieve the created timestamp of the node.
        // @phpstan-ignore-next-line: Suppresses PHPStan error for accessing value directly.
        $field_created_date = $entity->get('created')->value;

        // Extract the year as a string from the created timestamp.
        $year = date('Y', $field_created_date);

        // Check if a taxonomy term with the same year already exists in the 'year' vocabulary.
        $existing_terms = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties(['name' => $year, 'vid' => 'year']);

        // If no existing term is found for the year, create a new term.
        if (empty($existing_terms)) {
          // Create a new taxonomy term for the year.
          $term = Term::create([
            'name' => $year,
            'vid' => 'year',
          ]);
          // Save the newly created term.
          $term->save();

          // Get the term ID after saving.
          $term_id = $term->id();

          // Assign the created term ID to the node's 'field_year'.
          $entity->set('field_year', $term_id);
        }
        else {
          // If a term for the year already exists, use its ID.
          $existing_term = reset($existing_terms);
          $term_id = $existing_term->id();

          // Assign the existing term ID to the node's 'field_year'.
          $entity->set('field_year', $term_id);
        }
      }
      break;

    // Handle case for 'classification_record' bundle.
    case 'classification_record':
      // Initialize variables for suffix and classification codes.
      $suffix_code = "";
      $classification_code = "";
      $code = "";

      // Check if the 'field_classification_code' field is set and not empty.
      if (isset($entity->field_classification_code)) {
        if (!$entity->field_classification_code->isEmpty()) {
          // Load the term ID from the classification code field.
          $classification_code_id = $entity->field_classification_code->getValue()[0]['target_id'];
          // Load the term name associated with the classification code ID.
          $classification_code = Term::load($classification_code_id)->getName();
          $code = $classification_code; // Store the classification code.
        }
      }

      // Check if the 'field_code_suffix' field is set and not empty.
      if (isset($entity->field_code_suffix)) {
        if (!$entity->field_code_suffix->isEmpty()) {
          // Load the term ID from the code suffix field.
          $suffix_code_id = $entity->field_code_suffix->getValue()[0]['target_id'];
          // Load the term name associated with the suffix code ID.
          $suffix_code = Term::load($suffix_code_id)->getName();
          // Append the suffix code to the classification code.
          $code .= '(' . $suffix_code . ')';
        }
      }

      // If the constructed code is not empty, assign it to the 'field_full_class_code'.
      if ($code !== "") {
        $entity->set('field_full_class_code', $code);
      }

      break;
  }
}
